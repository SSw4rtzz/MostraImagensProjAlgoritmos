/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projfinal;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearch = new javax.swing.JButton();
        txtLink = new javax.swing.JTextField();
        flagDominio = new javax.swing.JCheckBox();
        level = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        btnIPT = new javax.swing.JButton();
        txtTema = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        loading = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto");
        setBackground(new java.awt.Color(255, 255, 255));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/pesquisa.png"))); // NOI18N
        btnSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtLink.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtLink.setText("https://");
        txtLink.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLinkKeyPressed(evt);
            }
        });

        flagDominio.setText("Dominios");

        level.setModel(new javax.swing.SpinnerNumberModel(1, 1, 9, 1));
        level.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Nivel");

        btnIPT.setText("IPT");
        btnIPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIPTActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tema");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtLink, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(flagDominio)
                                .addGap(101, 101, 101)
                                .addComponent(btnIPT))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTema, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTema))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flagDominio, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIPT)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtLink, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loading, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLinkKeyPressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                programaOnline(); //Corre a função programa, que contem a maior parte do código
            } catch (IOException ex) {
                programaOffline();
            }
        }

    }// GEN-LAST:event_txtLinkKeyPressed

    private void btnIPTActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnIPTActionPerformed
        txtLink.setText("http://www.ipt.pt");
    }// GEN-LAST:event_btnIPTActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // GEN-FIRST:event_btnSearchActionPerformed
            programaOnline(); //Corre a função programa, que contem a maior parte do código
        } catch (IOException ex) {
            programaOffline();
        }
    }// GEN-LAST:event_btnSearchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIPT;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox flagDominio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner level;
    private javax.swing.JProgressBar loading;
    private javax.swing.JTextField txtLink;
    private javax.swing.JTextField txtTema;
    // End of variables declaration//GEN-END:variables

    
    Thread load = new Thread(){
        public void run(){
            for(int i=0;i<=90;i++){
                loading.setValue(i);
                try{Thread.sleep(150);}
                catch(Exception e){}
            }
        }
    };
    
    public void programaOnline() throws MalformedURLException, IOException {
        load.start();
        String link = txtLink.getText();
        int nivel = (int) level.getValue();
        EDACrawler eda = new EDACrawler();
        String tema = txtTema.getText();
        boolean dominio = flagDominio.isSelected();
        String[] urlCortado = link.split("/");
        String dominioText = urlCortado[2];
        if(urlCortado[2].contains("www.")){
           String[] dom = dominioText.split("www.");
           dominioText = dom[1];
        }
        Payload ini = eda.process(link, nivel, dominio, dominioText, tema); //Verifica repetidos e apaga
        ini=eda.repetido(ini);

        int numberImgs = ini.imgs.size();
        int numberLinks = ini.links.size();
        String msg = "Foram encontradas " + numberImgs + " imagens em " + numberLinks + " links.";
        JOptionPane.showMessageDialog(this, msg);
        JFrame f = new JFrame();
        f.setTitle("Imagens");
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.setSize(800, 500);
        f.setLocationRelativeTo(null);
        
        JPanel panel = new JPanel(new GridLayout(0,5,10,10));
        load.interrupt();//Para loading
        
        loading.setValue(90);
        for (String img : ini.imgs) {
            try {
                Image image = null;
                URL url = new URL(img);
                image = ImageIO.read(url);
                JLabel lbl = new JLabel();
                ImageIcon icon = null;
                int iWidth = image.getWidth(null);
                int iHeight = image.getHeight(null);
                int newWidth = 100;
                if (iWidth > iHeight) {
                    icon = new ImageIcon(
                            image.getScaledInstance(newWidth, (newWidth * iHeight) / iWidth,
                                    Image.SCALE_DEFAULT));
                } else {
                    icon = new ImageIcon(
                            image.getScaledInstance((newWidth * iWidth) / iHeight, newWidth,
                                    Image.SCALE_DEFAULT));
                }
                lbl.setIcon(icon);
                panel.add(lbl);
    
            } catch (IllegalArgumentException | NullPointerException e) {
                System.out.println("Erro: " + img);
            }
        }
        /* Dimensões */
        int x = 700;
        int y = 500;
        
        final JScrollPane scroll = new JScrollPane(panel);
         scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
         scroll.setBounds(5,5, x-10, y-10);
         
         JPanel content = new JPanel(null);
         content.setPreferredSize(new Dimension(x,y));
         content.add(scroll);
        f.setContentPane(content);
        f.pack();
        f.setVisible(true);
        
        BufferedImage bImage = null;
        new File("./src/offline/" + urlCortado[2]+ "_" + nivel).mkdirs();
        for (String img : ini.imgs) {
                URL url = new URL(img);
                bImage = ImageIO.read(url);
                String[] imgSplit = img.split("/");
                String nome = imgSplit[imgSplit.length -1];
                if(img.contains(".png")){
                    ImageIO.write(bImage, "png", new File("./src/offline/" + urlCortado[2]+ "_" +nivel + "/" + nome));
                }else if(img.contains(".gif")){
                    ImageIO.write(bImage, "gif", new File("./src/offline/" + urlCortado[2]+ "_" + nivel + "/" + nome));
                }else if(img.contains(".jpg")){
                    ImageIO.write(bImage, "jpg", new File("./src/offline/" + urlCortado[2]+ "_" +nivel + "/" + nome));
                }
        }
        
        loading.setValue(100);
        load = new Thread();
        
    }


    public void programaOffline(){
        loading.setValue(5);
        String link = txtLink.getText();
        int nivel = (int) level.getValue();
        String tema = txtTema.getText();
        String[] urlCortado = link.split("/");

        File dir = new File("./src/offline/" + urlCortado[2] + "_" + nivel);
        System.out.println(urlCortado[2] + "_" + nivel);
        String[] EXTENSIONS = new String[]{
            "gif","png","bmp" 
        };
         loading.setValue(30);
        FilenameFilter IMAGE_FILTER = new FilenameFilter(){
           @Override
           public boolean accept(File dir, String nome){
               for (String ext : EXTENSIONS){
                   if(nome.endsWith("." + ext)){
                       return(true);
                   }
               }
               return(false);
           }
        };
        loading.setValue(60);    
        JFrame frame = new JFrame();
        frame.setTitle("Imagens");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 500);
        frame.setLocationRelativeTo(null);
        
        JPanel panel = new JPanel(new GridLayout(0,5,10,10));
        
        if(dir.isDirectory()){
            for(File f:dir.listFiles(IMAGE_FILTER)){
                BufferedImage img = null;
            
            try{
                img = ImageIO.read(f);
                JLabel lbl = new JLabel();
                ImageIcon icon = null;
                int iWidth = img.getWidth(null);
                int iHeight = img.getHeight(null);
                int newWidth = 100;
                if (iWidth > iHeight) {
                    icon = new ImageIcon(
                            img.getScaledInstance(newWidth, (newWidth * iHeight) / iWidth,
                                    Image.SCALE_DEFAULT));
                } else {
                    icon = new ImageIcon(
                            img.getScaledInstance((newWidth * iWidth) / iHeight, newWidth,
                                    Image.SCALE_DEFAULT));
                }
                lbl.setIcon(icon);
                panel.add(lbl);
                
                
                System.out.println("image: " + f.getName());
                System.out.println("size: " + f.length());
                
            } catch(IllegalArgumentException | NullPointerException | IOException e){
                System.out.println("Erro: " + img);
            }
            }
        }
                loading.setValue(90);    
        /* Dimensões */
        int x = 700;
        int y = 500;
        
        final JScrollPane scroll = new JScrollPane(panel);
         scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
         scroll.setBounds(5,5, x-10, y-10);
         
         JPanel content = new JPanel(null);
         content.setPreferredSize(new Dimension(x,y));
         content.add(scroll);
        frame.setContentPane(content);
        frame.pack();
        frame.setVisible(true);
        loading.setValue(100);    
    }
}


                
